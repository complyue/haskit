import * 'net'

import * './debug'


export {
  symbol @haskItServer
  symbol @haskItPeer
}


{## The meta information for a mounted servlet #}
export data Servlet(service, entryUrl, ***extras) pass


export class HaskItServer {

  # a stack of overlayed edh modules providing web resources
  WEB_MODULES = (
    'haskit/web', # from haskit
    'dim/web', # from hasdim
    'swarm/web', # from sedh
    'net/web', # from nedh
    'web', # from edh
  )

  # extra routes by path in url
  URL_ROUTES = {}


  # constructor
  method __init__(
    netInterface= '127.0.0.1',
    httpPort= 3780,
    wsPort= 3790,
    numAltPorts= 9,
    useSandbox= true,
  ) {

    # collection of active servlets by path
    this._wsServlets = {}
    # collection of active websocket clients with their respecitive handling service module scope
    this._wsClients = {}

    this.ws = WsServer(
      that.wsService,
      addr= netInterface, port= wsPort,
      port'max= wsPort+numAltPorts,
      useSandbox= useSandbox,
    )
    case this.ws.addrs() of {
      { wsAddr :> _extraWsAddrs } -> {
        console.info<| 'HaskIt WebSocket service listening: ws://'
        ++ wsAddr.host() ++ ':' ++ wsAddr.port()
      }
      error( 'HaskIt WebSocket service failed start serving.' )
    }

    this.http = HttpServer(
      that.WEB_MODULES,
      netInterface, httpPort, routes= { # routes by URI
        # tell web browser our port of WebSocket at uri `/@`
        "@": (blob$str$ wsAddr.port(), mime= 'text/plain', ),
      } =< that.URL_ROUTES,
      port'max= httpPort+numAltPorts,
    )
    case this.http.addrs() of {
      { httpAddr :> _extraHttpAddrs } -> {
        console.info<| 'HaskIt http service listening: http://'
        ++ httpAddr.host() ++ ':' ++ httpAddr.port()
      }
      error( 'HaskIt http service failed start serving.' )
    }

  }


  {##
   # per-client service method to run as a dedicated Edh program
   #
   # note once this procedure returns, the ws connection is disconnected, all forkee threads spawn from this thread, together with this thread, will be terminated as well.
   #}
  method wsService() {

    # obtain effectful arts per WebSocket service context
    peer = perform @netPeer
    peer =: Peer()
    rqURI = perform rqURI
    # rqParams = perform rqParams

    defer {
      console.debug<| 'Disconnecting ws client - [' ++ rqURI ++ '] ' ++ peer
    }
    console.debug<| 'WebSocket client connected - [' ++ rqURI ++ '] ' ++ peer

    effect { # define conventional artifacts in effect
      # note in assignments to symbolic attributes, semicolon before `@` is likely necessary, to disambiguate the `@` from an infix operator, in case there are any expressions before it

      # local receiving end of the standard data channel
      ; @dataSink = peer.armChannel( dataChan ?:= 'data' )

      # HaskIt specific effectful artifacts for commands to be landed here
      ; @haskItServer = that
      ; @haskItPeer = peer

    }

    # check if a servlet mounted for this client request
    case this._wsServlets[rqURI] of {@
      # where incoming commands will be landed
      svcScope = peer.sandbox or scope()

      method keepServing() {
        while peer.eol() is false case peer.readCommand() of {@ { cmdVal } -> {
            console.warn<| 'Unexpected command result from ws: ' ++ desc(cmdVal)
        } @}
      }

      { Servlet(service) } -> { # hook this client to the servlet

        effect method implantServiceMethods(svcMths) {
          from svcMths import * into svcScope
        }

        effect keepServing = keepServing

        service()

      }

      # no servlet mounted for this request, treat as active client session alone
      clntsOnPath = this._wsClients[rqURI] |= {}
      # cleanup on termination of the service module procedure thread
      defer clntsOnPath[peer] = nil
      # record this connection
      clntsOnPath[peer] = svcScope
      # keep serving over this connection
      keepServing()

    @} $=> { exc } -> {
      console.error<| 'Exception by ws client ' ++ peer ++ ' error: '
      ++ desc(exc)
    }

  }


  {##
   # Enumerate all websocket clients connected to the specified path, those not hooked by a servlet
   #}
  generator wsClientsOn( path ) case this._wsClients[path] of
  # nil means no such path ever connected, we only care non-nil case
  { clntsOnPath } -> for (wsPeer, svcScope) from clntsOnPath do {
    wsPeer =: Peer()
    ;| wsPeer.eol() -> clntsOnPath[wsPeer] = nil
    effect @haskItPeer = wsPeer
    yield (wsPeer, svcScope)
  }


  {##

`servlet` should take the service module scope as the only arg, it'll be called on the serive thread, and can hold the client connection abitrarily long without synchronous return; once it decides to return, it should return a bool to indicate whether the client should be disconnected immediately, or continue being served.

The servlet can repeat `@netPeer.readCommand()` or `@netPeer.readSource()` before return, after it returns `false`, the client will continue being served by `readCommand()` looping within the service module scope; if it returns `true`, the client will be disconnected immediately.

   #}
  method mountServlet(
    path= '/' ++ UUID(), entryUrl= None, ***extras
  ) service => {
    case this._wsServlets[path] of { Servlet() = servlet } -> {
      console.warn<| 'Replacing servlet on path [' ++ path ++ ']: ' ++ servlet
    }
    this._wsServlets[path] = Servlet(service, entryUrl, ***extras)
    return path
  }

  method unmountServlet( path ) {
    this._wsServlets[path] = nil
  }

  generator mountedServlets() {
    for (path, servlet) from this._wsServlets do yield (path, servlet)
  }


  method join() {
    this.ws.join()
    this.http.join()
  }

  method stop() {
    this.http.stop()
    this.ws.stop()
  }

}
