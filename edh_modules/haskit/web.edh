
export class HaskItServer {

  # meant to be effect-imported
  export method withEveryHaskItClient( perWebClientAction ) {
    this.wcActionSink <- perWebClientAction
  }

  # meant to be called from a web client's serving thread, to which some event
  # perceiver will be installed, the `wsPeer` passed to here should be a
  # WebSocket connection established with the root browser window of the client
  method registerWebClient( wsPeer ) {
    perceive this.wcActionSink { wcAction } -> {
      wcAction( wsPeer )
    }
  }

  method __init__(
    netInterface= '127.0.0.1',
    httpPort= 3780,
    wsPort= 3790,
    numAltPorts= 9,
  ) {

    this.wcActionSink = sink

    # locally import Nedh stuff, not needed elsewhere
    import * 'net'

    this.ws = WsServer(
      'haskit/web/ws', netInterface, wsPort,
      port'max= wsPort+numAltPorts,
      init= modu => {
        modu.hskiServer = this
      },
    )
    case this.ws.addrs() of {
      { wsAddr :> _extraWsAddrs } -> {
        console.info<| 'HaskIt WebSocket service listening: ws://'
        ++ wsAddr.host() ++ ':' ++ wsAddr.port()
      }
      error( 'HaskIt WebSocket service failed start serving.' )
    }

    this.http = HttpServer(
      ( # a stack of overlayed edh modules providing web resources
        'haskit/web', # from haskit
        'dim/web', # from hasdim
        'swarm/web', # from sedh
        'net/web', # from nedh
        'web', # from edh
      ),
      netInterface, httpPort, routes= (
        # tell web browser our port of WebSocket at uri `/:`
        ( ":", '' ++ wsAddr.port(), mime= 'text/plain' ),
      ), port'max= httpPort+numAltPorts,
    )
    case this.http.addrs() of {
      { httpAddr :> _extraHttpAddrs } -> {
        console.info<| 'HaskIt http service listening: http://'
        ++ httpAddr.host() ++ ':' ++ httpAddr.port()
      }
      error( 'HaskIt http service failed start serving.' )
    }

  }

  method join() {
    this.ws.join()
    this.http.join()
  }

  method stop() {
    this.http.stop()
    this.ws.stop()
  }

}
