
export class HaskItServer {

  # a stack of overlayed edh modules providing web resources
  WEB_MODULES = (
    'haskit/web', # from haskit
    'dim/web', # from hasdim
    'swarm/web', # from sedh
    'net/web', # from nedh
    'web', # from edh
  )

  # WebSocket serving module
  WS_MODULE = 'haskit/web/ws'

  # extra routes by url
  URL_ROUTES = ()


  clientsEachDo :: ( { effect {
        # bound server instance of this method
        hski :: HaskItServer
        # the peer object connected through WebSocket,
        # same as the peer object passed to the action
        hskiPeer :: Peer
        # standard data channel sink by Nedh convention
        ; @dataSink :: EventSink
        # also the same peer object as `hskiPeer`, by Nedh convention
        ; @netPeer :: Peer
    } } => Peer -> Any ) -> nil
  # send the specified action to be perceived thus performed on each web
  # client's serving thread (goroutine)
  export method clientsEachDo( perWebClientAction ) {
    this.wcaSink <- perWebClientAction
    return nil
  }


  method __init__(
    netInterface= '127.0.0.1',
    httpPort= 3780,
    wsPort= 3790,
    numAltPorts= 9,
  ) {

    # the sink for web client actions to be performed on demand
    this.wcaSink = sink?subseq

    # locally import Nedh stuff, not needed elsewhere
    import * 'net'

    this.ws = WsServer(
      that.WS_MODULE, netInterface, wsPort,
      port'max= wsPort+numAltPorts,
      init= modu => {
        modu.hskiServer = this
      },
    )
    case this.ws.addrs() of {
      { wsAddr :> _extraWsAddrs } -> {
        console.info<| 'HaskIt WebSocket service listening: ws://'
        ++ wsAddr.host() ++ ':' ++ wsAddr.port()
      }
      error( 'HaskIt WebSocket service failed start serving.' )
    }

    this.http = HttpServer(
      that.WEB_MODULES,
      netInterface, httpPort, routes=
      # tell web browser our port of WebSocket at uri `/:`
      ( ":", '' ++ wsAddr.port(), mime= 'text/plain' )
      :> that.URL_ROUTES,
      port'max= httpPort+numAltPorts,
    )
    case this.http.addrs() of {
      { httpAddr :> _extraHttpAddrs } -> {
        console.info<| 'HaskIt http service listening: http://'
        ++ httpAddr.host() ++ ':' ++ httpAddr.port()
      }
      error( 'HaskIt http service failed start serving.' )
    }

  }

  method join() {
    this.ws.join()
    this.http.join()
  }

  method stop() {
    this.http.stop()
    this.ws.stop()
  }

}
