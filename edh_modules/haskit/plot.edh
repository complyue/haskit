{#
 # plotting procedures
 #}

import * './web'
import * './debug'


export class snippet {
  method __init__(src) this.__repr__ = str(src)
}

export class snippets {
  method __init__(srcs) this.__repr__ = join(*srcs, sep='\n\n')
}


{## Plot a group with specified script

An instance of `HaskItServer` (usually a descendant instance of it) must be in effect via `@haskItServer` key.

Especially note that the plot script can be evaluated multiple times and concurrently, when multiple clients are connected, so it's usually a good idea to use a scoped block to wrap the plotting statements, unless you have good reasons not to.

 #}
export generator plot( pgid ) void {
  {# note wrt the js!expr posted to web clients:
outer most curly braces are being interpreted as markers of a block of code in js `eval`, need to get it parenthese quoted, in case a dict (or JS object) literal is intended.
   #}

  # intermediate data for the plot group
  namespace pgData( pgid= pgid, ) {
    naxes = 0
  }

  for crPeer from perform @haskItServer.clients() do {

    method defineAxis( axisName= 'axis' ) {
      # use a shared counter to isolate different root client windows from
      # synchronizing axes with eachothers
      axisNum = ai pgData.naxes+=1
      return axisName ++ '#' ++ axisNum ++ '@' ++ pgid
    }

    generator plotWindow( pwid ) {
      # open a new plot window from this root client window, establish the
      # comm channel to it
      plotChannel = str( UUID() )
      plotSink = crPeer.armChannel( plotChannel )
      for ack from ( outlet= plotSink ) | () =>* {
        crPeer.postCommand( js!expr {
            void openPlotWindow( {$ pgid $}, {$ pwid $}, {$ plotChannel $} )
        } )
      } do {
        if ack is not 'plot-win-open'
        then error$ 'bug: bad handshake, check haze/plot-relay.mjs'

        break
      }

      # intermediate data for the plot window
      namespace pwData () {
        nds = 0
      }

      method defineDataSource(** cols ) {
        dsNum = ai pwData.nds+=1
        dsName = 'ds' + dsNum

        let ( colNames, colDtypes, ) = (*unzip$ for ( k, v ) from cols
          do ( k, v.dtype|str, )
        )
        # hskiDebug.replHere()
        crPeer.p2c( plotChannel, js!expr ( {
              plotCmd : {$str$ js!expr
                receiveDataSource(
                  {$ dsName $},
                  {$snippet$json$ colNames $},
                  {$snippet$json$ colDtypes $},
                )
              $}
        } ) )
        for ( _k, v ) from cols do {
          crPeer.p2c( plotChannel, js!expr ( { nextDir : 'data' } ) )
          crPeer.p2c( plotChannel, blob$ v )
        }

        return snippet$ 'plotData['++repr(dsName)++']'
      }

      method postJsCode( jsExpr ) {
        crPeer.p2c( plotChannel, js!expr ( {
              plotCmd : {$ str$ jsExpr $}
        } ) )
      }

      yield (
        defineDataSource= defineDataSource, postJsCode= postJsCode,
      )
    }

    yield (
      defineAxis= defineAxis, plotWindow= plotWindow,
    )
  }

}
