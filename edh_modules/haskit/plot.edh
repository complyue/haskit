{#
 # plotting procedures
 #}

import * 'net'
effect import * 'net/effects'

import * './web'
import * './utils'
import * './debug'


export method defineViewRange( vrName= 'view-range', vrIdent= None, ) {
  return vrName ++ '#' ++ vrIdent or UUID()
}

export method defineViewFocus( vfName= 'view-focus', vfIdent= None, ) {
  return vfName ++ '#' ++ vfIdent or UUID()
}

export method defineAxisCursor( acName= 'axis-cursor', acIdent= None, ) {
  return acName ++ '#' ++ acIdent or UUID()
}


{##
 # Organize and show a group of plot/narrator windows

The group plot script will be evaluated against each hski client (root window), with its @haskItPeer in effect.

An instance of `HaskItServer` (usually a descendant instance of it) must be in effect via `@haskItServer` key.

 #}
export method plot( pgid, clientPath= '/' ) interpreter groupPlotter (
  grpPlotScope, grpPlotScript,
) void {
  {# note wrt the js!expr posted to web clients:
outer most curly braces are being interpreted as markers of a block of code in js `eval`, need to get it parenthese quoted, in case a dict (a.k.a. JS object) literal is intended.
   #}
  hskiServer = perform @haskItServer
  hskiServer =: HaskItServer()

  effect pgid = pgid

  for (_rootPeer, _rootSvcScope) from hskiServer.wsClientsOn( clientPath )
  do grpPlotScope.eval$ grpPlotScript
}


{##
Open the client plot window identified by `pwid`, vend effectful API to plot figures with glyphs in it
 #}
export method plotWindow( pwid, title= None, page= '/page.html', )
interpreter winPlotter ( winPlotScope, winPlotScript, ) void {
  effect default pgid = 'plot'
  let pgid = perform pgid
  , hskiServer = perform @haskItServer
  , rootPeer = perform @haskItPeer
  hskiServer =: HaskItServer()
  rootPeer =: Peer()

  servicePath = '/' ++ UUID() # allocate a unique service path
  plotUrl = page ++ '?service=' ++ servicePath
  if title then plotUrl += (
    '&title=' ++ title # TODO urlEncode it
  )
  hskiServer.mountServlet(
    servicePath, entryUrl= plotUrl,
    pgid= pgid, pwid= pwid, title= title or nil,
  ) $ () => {

    # the plot script has to explicitly return a bool to keep the service mounted, or it'll get unmounted and further refresh of the browser window can get nothing plotted
    return case winPlotScope.eval$ winPlotScript of {
      # all done, disconnect this window as no further client/server interaction expected
      true -> pass
      {return true} -> pass
      # initial plotting done, keep this window connected, further C/S interactions expected
      false -> perform keepServing()
      {return false} -> perform keepServing()
      _ -> { # one-shot plotting, umount the service
        hskiServer.unmountServlet(servicePath)
      }
    }

  }

  # Instruct the browser to open one window automatically
  plotWinName = pgid ++ '/' ++ pwid ++ '-window'
  rootPeer.postCommand(js!expr
    window.open( {$plotUrl$}, {$plotWinName$}, )
  )
}


{##
Open the client narrative window identified by `pnid`, vend effectful API to install narrative storylines in it
 #}
export method narrWindow( pnid, title= None, page= '/narr.html', )
interpreter winNarrator ( winNarrScope, winNarrScript, ) void {
  effect default pgid = 'plot'
  let pgid = perform pgid
  , hskiServer = perform @haskItServer
  , rootPeer = perform @haskItPeer
  hskiServer =: HaskItServer()
  rootPeer =: Peer()

  servicePath = '/' ++ UUID() # allocate a unique service path
  hskiServer.mountServlet(servicePath) $ () => {

    # the narr script has to explicitly return a bool to keep the service mounted, or it'll get unmounted and further refresh of the browser window can get nothing
    return case winNarrScope.eval$ winNarrScript of {
      # all done, disconnect this window as no further client/server interaction expected
      true -> pass
      {return true} -> pass
      # initial plotting done, keep this window connected, further C/S interactions expected
      false -> perform keepServing()
      {return false} -> perform keepServing()
      _ -> { # one-shot narration setup, umount the service
        hskiServer.unmountServlet(servicePath)
      }
    }

  }

  # Instruct the browser to open one window automatically
  narrUrl = page ++ '?service=' ++ servicePath
  if title then narrUrl += (
    '&' ++ 'title=' ++ title # TODO urlEncode it
  )
  narrWinName = pgid ++ '/' ++ pnid ++ '-narrator'
  rootPeer.postCommand(js!expr
    window.open( {$narrUrl$}, {$narrWinName$}, )
  )
}
