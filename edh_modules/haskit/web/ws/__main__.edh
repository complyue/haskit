
{#
 # this is the client-facing entry module for a WebSocket endpoint.
 #
 # this module is instantiated and run per WebSocket connection, the
 # client is disconnected once this module finished running.
 #}

import ( Peer, **_ ) 'net/RT'
import * 'net/symbols'
effect import * 'net/effects'

import ( withWSC, **_ ) 'haskit/web'


# a Peer object should have been implanted atomically, the following
# line should have no technical effect but to hint an IDE for code
# completion etc.
peer ?= Peer()

console.debug<| 'WebSocket client connected - ' ++ peer

# define various effectful artifacts used for communication with this
# connected consumer client session, with `@netPeer` and `@dataSink` the
# minimum by convention
#
# note in assignments to symbolic attributes, semicolon before `@` is likely
# needed or the `@` may be parsed as an operator
effect {
  ; @netPeer = peer
  ; @dataSink = peer.armChannel( dataChan ?:= 'data' )
}


# should have been implanted by per-connection peer module init method
hskiServer ?= HaskItServer()

# let HaskIt entangle with this WSC
hskiServer.withWSC( peer )
