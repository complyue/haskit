
{#
 # this is the client-facing entry module for a WebSocket endpoint.
 #
 # this module is instantiated and run per WebSocket connection, the
 # client is disconnected once this module finished running.
 #}

import ( Peer, **_ ) 'net/RT'
import * 'net/symbols'
effect import * 'net/effects'


# a Peer object should have been implanted atomically, the following
# line should have no practical effect but to hint an IDE for code
# completion etc.
peer ?:= Peer()

console.info<| 'WebSocket client connected - ' ++ peer


# define various effectful artifacts used for communication with this
# connected consumer client session, with `@netPeer` and `@dataSink` the
# minimum by convention
#
# note in assignments to symbolic attributes, semicolon before `@` is likely
# needed or the `@` may be parsed as an operator
effect {
  ; @netPeer = peer
  ; @dataSink = peer.armChannel( dataChan ?:= 'data' )
}


{

  while false == peer.eol() { # this is the *Loop* in so-called REPL
    # Read+Eval (peer.readCommand) -> Print (peer.print) -> Loop

    # simply echo back whatever posted to default channel
    case peer.readSource() of {
      { srcIn } -> {
        # echo back
        peer.postCommand( srcIn )
        srcIn = nil # clear it
      }
      # note nil can be returned from `peer.readSource()` in case a command
      # is posted to another channel than the default one
    }

  }

} @=> {
  { exc } -> {
    console.error<| 'Disconnecting ws client ' ++ peer
    ++ ' for error: ' ++ exc
  }
  console.info<| 'Disconnecting ws client ' ++ peer
}
