
import * 'net'
effect import * 'net/effects'

import * 'haskit'

effect import * 'haskit/demo-server'

# above will be automatically imported by `hski`
# %% # this importing cell may need manual execution

# import hasdim this way so:
#  *) all exported artifacts are directly available
#  *) all module level artifacts are available via `hd`
#  *) monkey-patching to the module object is possible
hd = { import * 'dim' }
# import effectful support for dtypes etc.
effect import * 'dim/effects'


# %% #
let
, nPoints = 50001
, nDetailMax = nPoints//10+1

# %% #
let
, xRaw = arange( nPoints, dtype=f8, )
, yRaw = cumsum$random( nPoints, -0.499..0.501, dtype=f8, )

# %% #
let
, xSample = xRaw[0:nPoints:100]
, ySample = yRaw[0:nPoints:100]

# %% #
let
, nChg = 5
, yChg = copy$ ySample
yChg[0:nChg] = nan
yChg[nChg:All] = ySample[nChg:All] - ySample[0: -nChg]

# %#

# %% # First [Run Above] and choose `hski`, then open the url with a browser, then [Run Below]

# %%

zoomRangeX = defineViewRange( 'xZoom' )
syncedRangeX = defineViewRange( 'xSync' )

splRangeX = defineViewRange( 'splX' )
splRangeY = defineViewRange( 'splY' )
chgRangeX = defineViewRange( 'chgX' )
chgRangeY = defineViewRange( 'chgY' )

focusedFigure = defineViewFocus( 'focusedFigure' )
focusedPoint = defineAxisCursor( 'focusedPoint' )

splCursorPoint = defineAxisCursor( 'splCursorPoint' )
chgCursorPoint = defineAxisCursor( 'chgCursorPoint' )

plot( 'demoGroup' ) $ {
  # Note this block is in-place interpreted, synchronously, per each connected root window


  narrWindow( 'focusFigureNarr', 'Active Figure Info' ) $ {@
    # Note this block is in-place interpreted in a multi-shot fashion, asynchronously on their respective ws service thread, per each plot window connected (only if it opens the correct url)
    # So it's better to be a scoped block for context isolation, unless with good reasons not to

    perform @sendCmd(js!expr (async()=>{

          const figStory = narrator.addStoryLine(
            'focusFigureNarr', 'Active Figure Info',
            [ 'ffigName', 'ffigTitle', 'x', 'y', ],
            [ 'Figure Name', 'Figure Title', 'Cursor X', 'Cursor Y', ],
          )
          onViewFocusChange({$focusedFigure$}, (figName, figTitle)=>{
              figStory.updateNarremes({ffigName: figName, ffigTitle: figTitle})
          })
          onAxisCursorChange({$focusedPoint$},(x,y)=>{
              figStory.updateNarremes({ x: x, y: y, })
          })

          const zoomStory = narrator.addStoryLine(
            'zoomInfoNarr', 'Zoom Info',
            [ 'zoomRngX', ], [ "Zoomed X Range", ],
          )
          onViewRangeChange({$zoomRangeX$}, (start, end)=>{
              zoomStory.updateNarremes({ zoomRngX:
                  start.toFixed(2) + ' ~ ' + end.toFixed(2), })
          })

    })())

    return true {#
     # Disconnect the window, but keep this narration service mounted, so the window can be refreshed correctly.
     #}
  @}


  narrWindow( 'allFiguresNarr', 'All Figures Info' ) $ {@
    # Note this block is in-place interpreted in a multi-shot fashion, asynchronously on their respective ws service thread, per each plot window connected (only if it opens the correct url)
    # So it's better to be a scoped block for context isolation, unless with good reasons not to

    # Boken `ColumnDataSource`s have to be individually defined (initially sent) to each browser window
    dsSpl = defineDataSource(
      x= xSample, y= ySample, chg= yChg,
    )
    dsRaw = defineDataSource(
      x= xRaw, y= yRaw,
    )

    perform @sendCmd(js!expr (async()=>{

          const xsSpl = {$dsSpl$}.data.x
          const ysChg = {$dsSpl$}.data.chg
          const xsRaw = {$dsRaw$}.data.x

          const splStory = narrator.addStoryLine(
            'splStory', 'Sample Figure Info',
            [ 'shownRngX', 'shownRngY',
              'xCursor', 'yCursor', 'xSpl', 'ySpl', 'xRaw', 'yRaw', ],
            [ 'Shown X Range', 'Shown Y Range',
              'Cursor X', 'Cursor Y',
              'Sample X', 'Sample Y',
              'Data X', 'Data Y', ],
          )
          onViewRangeChange({$splRangeX$}, (start, end)=>{
              splStory.updateNarremes({ shownRngX:
                  start.toFixed(2) + ' ~ ' + end.toFixed(2), })
          })
          onViewRangeChange({$splRangeY$}, (start, end)=>{
              splStory.updateNarremes({ shownRngY:
                  start.toFixed(2) + ' ~ ' + end.toFixed(2), })
          })
          onAxisCursorChange({$splCursorPoint$},(x,y)=>{
              const diSpl = Math.max(0, bounds.le(xsSpl, x))
              const diRaw = Math.max(0, bounds.le(xsRaw, x))

              splStory.updateNarremes({
                  xCursor: x, yCursor: y,
                  xSpl: xsSpl[diSpl], ySpl: {$dsSpl$}.data.y[diSpl],
                  xRaw: xsRaw[diRaw], yRaw: {$dsRaw$}.data.y[diRaw],
              })
          })

          const chgStory = narrator.addStoryLine(
            'chgStory', 'Change Figure Info',
            [ 'shownRngX', 'shownRngY',
              'xCursor', 'yCursor', 'xChg', 'yChg', ],
            [ 'Shown X Range', 'Shown Y Range',
              'Cursor X', 'Cursor Y', 'Change X', 'Change Y', ],
          )
          onViewRangeChange({$chgRangeX$}, (start, end)=>{
              chgStory.updateNarremes({ shownRngX:
                  start.toFixed(2) + ' ~ ' + end.toFixed(2), })
          })
          onViewRangeChange({$chgRangeY$}, (start, end)=>{
              chgStory.updateNarremes({ shownRngY:
                  start.toFixed(2) + ' ~ ' + end.toFixed(2), })
          })
          onAxisCursorChange({$chgCursorPoint$},(x,y)=>{
              const diChg = Math.max(0, bounds.le(xsSpl, x))
              chgStory.updateNarremes({
                  xCursor: x, yCursor: y,
                  xChg: xsSpl[diChg], yChg: ysChg[diChg],
              })
          })


          onViewFocusChange({$focusedFigure$}, (figName, figTitle)=>{
              if ( 'figSample' === figName ) {
                splStory.focus()
              } else if ( 'figChange' === figName ) {
                chgStory.focus()
              }
          })

    })())

    return true {#
     # Disconnect the window, but keep this narration service mounted, so the window can be refreshed correctly.
     #}
  @}


  plotWindow(
    'eagleView', 'Demo Eagle View', nWinOpen= 2,
  ) $ case perform reqParams.name of {@
    # Here we use a scoped block for context isolation, as this block is in-place interpreted in a multi-shot fashion, asynchronously on multiple WebSocket service threads, per each browser window context connected, i.e. the plot start page, each iframe as added into the start page, and when they get refreshed etc.


    # the service path is unique per each `plotWindow()` call
    const plot'session'id = perform reqPath


    'eagle' -> { # the `eagle` iframe of the plot page

      # Boken `ColumnRawSource`s have to be individually defined (initially sent) to each browser window
      dsSpl = defineDataSource(
        x= xSample, y= ySample,
      )
      # Dynamically loaded raw data per view range changed, to be empty initially
      dsDyn = defineDataSource(
        x= zeros(0), y= zeros(0),
      )

      perform implantServices $ namespace _ () export {
        method showRawData(xStart, xEnd,) {
          dpStart = max(0, xStart.floor)
          # trim too large a range span
          dpStop = min(len$ xRaw,
            dpStart + min(nDetailMax, (xEnd - xStart.floor).ceil))

          # hskiDebug.replHere()

          updateDataSource( dsDyn,
            x= xRaw[dpStart:dpStop], y= yRaw[dpStart:dpStop],
          )
        }
      }

      perform @sendCmd(js!expr (async()=>{

            const fig = plt.figure({
                name: 'figSample',
                title: 'Eagle View',
                toolbar_location: 'left',
                tools: [
                  'xwheel_zoom', 'ywheel_zoom',
                  'pan', 'crosshair', 'box_zoom',
                  'undo', 'redo', 'reset',
                ], sizing_mode: 'stretch_both',
            })
            announceRange( fig.x_range, {$ zoomRangeX $} )
            announceRange( fig.x_range, {$ splRangeX $} )
            announceRange( fig.y_range, {$ splRangeY $} )
            syncRange( fig.x_range, {$ syncedRangeX $} )

            fig.line({
                source: {$dsSpl$},
                x: { field: 'x' },
                y: { field: 'y' },
                color: '#0000FF', alpha: 0.7,
                legend: 'Sample',
            })

            fig.line({
                source: {$dsDyn$},
                x: { field: 'x' },
                y: { field: 'y' },
                color: '#000000', alpha: 0.7,
                legend: 'Raw',
            })

            for(let g of fig.select( bkh.Legend )) {
              g.location = 'top_left'
              g.click_policy = 'hide'
              g.background_fill_alpha = 0.6
            }


            const figView = await plt.show(fig)
            announceFocus(figView, {$focusedFigure$})
            announceAxisCursor(figView, defaultScale, {$focusedPoint$})
            announceAxisCursor(figView, defaultScale, {$splCursorPoint$})

            let startRngX = null, endRngX = null
            onViewRangeChange({$zoomRangeX$}, (start, end)=>{
                startRngX = start; endRngX = end
                hskiPageConn.ifAlive(peer => {
                    peer.postCommand(
                      `showRawData(${startRngX}, ${endRngX})`
                    )
                })
            })

      })())

      return false {#
       # Keep the window connected and this plotting service mounted, so the window can keep requesting new plot data on-demand, also the window can be refreshed correctly as a side effect.
       # CAVEAT
         This plot script (arrow procedure) captures the full hierearchy of its lexical scopes, kept mounted as a plotting service, all resources references by the closure are considered leaked in a sense.
       #}

    }


    'chg' -> { # the `chg` iframe of the plot page

      # Boken `ColumnRawSource`s have to be individually defined (initially sent) to each browser window
      dsSpl = defineDataSource(
        x= xSample, chg= yChg,
      )

      perform @sendCmd(js!expr (async()=>{

            const fig = plt.figure({
                name: 'figChange',
                title: 'Change Of Series',
                toolbar_location: 'left',
                tools: [
                  'xwheel_zoom', 'ywheel_zoom',
                  'pan', 'crosshair', 'box_zoom',
                  'undo', 'redo', 'reset',
                ], sizing_mode: 'stretch_both',
            })
            announceRange( fig.x_range, {$ zoomRangeX $} )
            announceRange( fig.x_range, {$ chgRangeX $} )
            announceRange( fig.y_range, {$ chgRangeY $} )
            syncRange( fig.x_range, {$ syncedRangeX $} )

            fig.line({
                source: {$dsSpl$},
                x: { field: 'x' },
                y: { field: 'chg' },
                color: '#333333', alpha: 0.7,
                legend: 'Change',
            })

            for(let g of fig.select( bkh.Legend )) {
              g.location = 'top_right'
              g.click_policy = 'hide'
              g.background_fill_alpha = 0.6
            }

            const figView = await plt.show(fig)
            announceFocus(figView, {$focusedFigure$})
            announceAxisCursor(figView, defaultScale, {$focusedPoint$})
            announceAxisCursor(figView, defaultScale, {$chgCursorPoint$})

      })())

      return true {#
       # Disconnect the window, but keep this plotting service mounted, so the window can be refreshed correctly.
       # CAVEAT
          This plot script (arrow procedure) captures the full hierearchy of its lexical scopes, kept mounted as a plotting service, all resources references by the closure are considered leaked in a sense.
       #}

      {#
       # Alternatively:
          * `return false` here will also keep the plotting service, and the ws connection to the plot window will also be kept connected, serving further RPC from browser js
          * otherwise this plot script is considered a one-shot, all resources are unreferenced then
       #}
    }


    # the plot start page, layout 2 plot iframes
    perform @sendCmd(js!expr (async()=>{
          addPlot('eagle', {style: "height: 50vh;"})
          addPlot('chg', {style: "height: 30vh;"})
    })())

    return true {#
     # Disconnect the window, but keep this plotting service mounted, so the window can be refreshed correctly.
     # CAVEAT
         This plot script (arrow procedure) captures the full hierearchy of its lexical scopes, kept mounted as a plotting service, all resources references by the closure are considered leaked in a sense.
     #}

  @}

}
