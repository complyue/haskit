
import * 'net'
import * 'haskit'

effect import * 'haskit/demo-server'


# %%
for hskiPeer from perform @haskItServer.clients() do {
  hskiPeer ?= Peer() # just to hint the IDE

  # we can construct some expression as for JavaScript source here, only if
  # it parses as valid Đ source (thus syntax highlighted as such), it'll
  # run as JavaScript source in the browser window, and we craft it that way.
  hskiPeer.postCommand( js!expr {
      console.log( 'xxx: ', 'utc nanos=' + {$ console.now() $} )

      {$snippet$ '''
// js code with syntax incompatible with Đ can be interpolated like this
for(let n of [3, 2, 5]) {
  console.info('arbitrary js code says: ' + n)
}
''' $}
    }
  )
}


# %%
# client root peer is a WsPeer object, whose lander environment hosts our
# expression, we can call any function exposed there, we can access constants
# and variables there. but note due to JavaScript strict evaluation, we can
# not introduce new variables there (via var/let/const).
for hskiPeer from perform @haskItServer.clients() do {
  hskiPeer ?= Peer() # just to hint the IDE

  hskiPeer.postCommand( js!expr
    clearLog()
  )
}


# %%
for hskiPeer from perform @haskItServer.clients() do {
  hskiPeer ?= Peer() # just to hint the IDE

  hskiPeer.postCommand( js!expr
    uiLog( 'xxx', 'msg', 'zzz ... yyy' )
  )
}
