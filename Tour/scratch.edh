
# import hasdim this way so:
#  *) all exported artifacts are directly available
#  *) all module level artifacts are available via `hd`
#  *) monkey-patching to the module object is possible
hd = { import * 'dim' }
# support for dtypes etc. are effectful
effect import * 'dim/effects'


# %{
{@
  # %%
  ss = str( 3*7 )

  # %#
  this :: ( is whatever not an executable cell )

  # %%
  xx = 'xx'

  # %}
@}

# %%
clientsEachDo $ wsPeer => {
  # note this runs in each client's ws serving thread, not synchronously
  wsPeer.postCommand(
    # we can interpolate an expression as for JavaScript source here, only if
    # if parses as valid Edh source (thus syntax highlighted as such), it'll
    # run as JavaScript source in the browser window, and we craft it that way.
    expr
    console.log( 'xxx: ', 'utc nanos=' + {$ console.now() $} )
  )
}

# %%
clientsEachDo $ wsPeer => {
  wsPeer.postCommand( expr
    clearLog()
  )
}

# %%
clientsEachDo $ wsPeer => {
  wsPeer.postCommand( expr
    uiLog( 'xxx', 'msg', 'zzz ... yyy' )
  )
}

# %%
clientsEachDo $ wsPeer => {
  wsPeer.postCommand( expr {
      let hw = window.open( '/haze.html', 'aplotwin' )
  } )
}
