import * 'net'

import * 'haskit'

effect import * 'haskit/demo-server'

# %# above will be automatically imported by `hski`


# %%
for (
  hskiPeer: Peer, svcScope: scope
) from perform @haskItServer.wsClientsOn('/') do {

  # we can construct some expression as for JavaScript source here, only if it parses as valid Đ source (thus syntax highlighted as such), it'll run as JavaScript source in the browser window, and we craft it that way.
  hskiPeer.postCommand( js!expr {
      console.log( 'xxx: ', 'utc nanos=' + {$ console.now() $} )

      for(let n of [3, 2, 5]) {
        console.info('js code says: ' + n)
      }

      {$snippet$ '''
// js code with syntax incompatible with Đ can be interpolated like this
for(let i=0; i<3; i++) {
  console.info('arbitrary js code says: ' + i)
}
''' $}
    }
  )
}


# %%
# client root peer is a WsPeer object, whose lander environment hosts our expression, we can call any function exposed there, we can access constants and variables there. but note due to JavaScript strict evaluation, we can not introduce new variables there (via var/let/const).
for (
  hskiPeer: Peer, svcScope: scope
) from perform @haskItServer.wsClientsOn('/') do {
  hskiPeer.postCommand( js!expr

    clearLog()

  )
}


# %%
for (
  hskiPeer: Peer, svcScope: scope
) from perform @haskItServer.wsClientsOn('/') do {
  hskiPeer.postCommand( js!expr

    uiLog( 'xxx', 'msg', 'zzz ... yyy' )

  )
}
