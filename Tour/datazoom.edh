
import * 'net'
effect import * 'net/effects'

import * 'haskit'

effect import * 'haskit/demo-server'

# above will be automatically imported by `hski`
# %% # this importing cell may need manual execution

# import hasdim this way so:
#  *) all exported artifacts are directly available
#  *) all module level artifacts are available via `hd`
#  *) monkey-patching to the module object is possible
hd = { import * 'dim' }
# import effectful support for dtypes etc.
effect import * 'dim/effects'


# %% #
nPoints = 50001

let xRaw = arange( nPoints, dtype=f8, )
let yRaw = cumsum$random( nPoints, -0.499..0.501, dtype=f8, )

# %% #
xSample = xRaw[0:nPoints:100]
ySample = yRaw[0:nPoints:100]


# %%

for () from plot( 'randomGroup' ) do {

  perform plotWindow( 'randomSample', 'Overview of Sampled Line' ) $ ()=>{
    ds = perform defineDataSource(
      x= xSample, y= ySample,
    )

    perform @sendCmd(js!expr (async()=>{

          const fig = plt.figure( { name: 'figSample',
              title: 'Sample of Random Series',
              toolbar_location: 'left',
              sizing_mode: 'stretch_both',
          } )
          fig.line( {
              source: {$ ds $},
              x: { field: 'x' },
              y: { field: 'y' },
              color: '#000000', alpha: 0.7,
              legend: 'Sample',
          } )
          for(let g of fig.select( bkh.Legend )) {
            g.location = 'top_left'
            g.click_policy = 'hide'
            g.background_fill_alpha = 0.6
          }

          const plotView = await plt.show( fig, document.body )

    })())

    return true{##undefined##undefinedundefined##undefined##undefinedundefinedundefined
     # Disconnect the window, but keep this plotting service mounted, so the window can be refreshed correctly.
     # CAVEAT
       This plot script (arrow procedure) captures the full hierearchy of its lexical scopes, kept mounted as a plotting service, all resources references by the closure are considered leaked in a sense.
     #}

    {#
     # Alternatively:
       * `return false` here will also keep the plotting service, and the ws connection to the plot window will also be kept connected, serving further RPC from browser js
       * otherwise this plot script is considered a one-shot, all resources are unreferenced then
     #}
  }

}
